--- xen-4.3.1/tools/libxl/libxl.c.orig	2013-10-30 08:18:28.000000000 +0000
+++ xen-4.3.1/tools/libxl/libxl.c	2014-12-03 02:11:11.054277117 +0000
@@ -2331,16 +2331,16 @@
                                            libxl_device_disk **disks,
                                            int *ndisks)
 {
-    char *be_path = NULL;
+    char *fe_path = NULL;
     char **dir = NULL;
     unsigned int n = 0;
     libxl_device_disk *pdisk = NULL, *pdisk_end = NULL;
     int rc=0;
     int initial_disks = *ndisks;
 
-    be_path = libxl__sprintf(gc, "%s/backend/%s/%d",
-                             libxl__xs_get_dompath(gc, 0), type, domid);
-    dir = libxl__xs_directory(gc, XBT_NULL, be_path, &n);
+    fe_path = libxl__sprintf(gc, "%s/device/%s",
+                              libxl__xs_get_dompath(gc, domid), type);
+    dir = libxl__xs_directory(gc, XBT_NULL, fe_path, &n);
     if (dir) {
         libxl_device_disk *tmp;
         tmp = realloc(*disks, sizeof (libxl_device_disk) * (*ndisks + n));
@@ -2350,11 +2350,13 @@
         pdisk = *disks + initial_disks;
         pdisk_end = *disks + initial_disks + n;
         for (; pdisk < pdisk_end; pdisk++, dir++) {
-            const char *p;
-            p = libxl__sprintf(gc, "%s/%s", be_path, *dir);
-            if ((rc=libxl__device_disk_from_xs_be(gc, p, pdisk)))
+        const char *be_path;
+        be_path = libxl__xs_read(gc, XBT_NULL,
+		    libxl__sprintf(gc, "%s/%s/backend", fe_path, *dir));
+        if (!be_path)
+	        goto out;
+        if ((rc=libxl__device_disk_from_xs_be(gc, be_path, pdisk)))
                 goto out;
-            pdisk->backend_domid = 0;
             *ndisks += 1;
         }
     }
@@ -2949,7 +2951,7 @@
     return;
 }
 
-static void libxl__device_nic_from_xs_be(libxl__gc *gc,
+static int libxl__device_nic_from_xs_be(libxl__gc *gc,
                                          const char *be_path,
                                          libxl_device_nic *nic)
 {
@@ -2960,6 +2962,11 @@
 
     libxl_device_nic_init(nic);
 
+    rc = sscanf(be_path, "/local/domain/%d/", &nic->backend_domid);
+    if (rc != 1) {
+        LOG(ERROR, "Unable to fetch device backend domid from %s", be_path);
+	    goto out;
+	}
     tmp = xs_read(ctx->xsh, XBT_NULL,
                   libxl__sprintf(gc, "%s/handle", be_path), &len);
     if ( tmp )
@@ -2988,6 +2995,10 @@
     nic->nictype = LIBXL_NIC_TYPE_VIF;
     nic->model = NULL; /* XXX Only for TYPE_IOEMU */
     nic->ifname = NULL; /* XXX Only for TYPE_IOEMU */
+    
+    rc = 0;
+ out:
+    return rc;
 }
 
 int libxl_devid_to_device_nic(libxl_ctx *ctx, uint32_t domid,
@@ -3022,14 +3033,15 @@
                                            libxl_device_nic **nics,
                                            int *nnics)
 {
-    char *be_path = NULL;
+    char *fe_path = NULL;
     char **dir = NULL;
     unsigned int n = 0;
     libxl_device_nic *pnic = NULL, *pnic_end = NULL;
+    int rc;
 
-    be_path = libxl__sprintf(gc, "%s/backend/%s/%d",
-                             libxl__xs_get_dompath(gc, 0), type, domid);
-    dir = libxl__xs_directory(gc, XBT_NULL, be_path, &n);
+    fe_path = libxl__sprintf(gc, "%s/device/%s",
+		             libxl__xs_get_dompath(gc, domid), type);
+    dir = libxl__xs_directory(gc, XBT_NULL, fe_path, &n);
     if (dir) {
         libxl_device_nic *tmp;
         tmp = realloc(*nics, sizeof (libxl_device_nic) * (*nnics + n));
@@ -3037,16 +3049,22 @@
             return ERROR_NOMEM;
         *nics = tmp;
         pnic = *nics + *nnics;
-        *nnics += n;
         pnic_end = *nics + *nnics;
         for (; pnic < pnic_end; pnic++, dir++) {
-            const char *p;
-            p = libxl__sprintf(gc, "%s/%s", be_path, *dir);
-            libxl__device_nic_from_xs_be(gc, p, pnic);
-            pnic->backend_domid = 0;
+            const char *be_path;
+            be_path = libxl__xs_read(gc, XBT_NULL,
+                    libxl__sprintf(gc, "%s/%s/backend", fe_path, *dir));
+            if (!be_path)
+                return ERROR_FAIL;
+            rc = libxl__device_nic_from_xs_be(gc, be_path, pnic);
+            if (rc) goto out;
+            *nnics += 1;
         }
     }
     return 0;
+
+ out:
+    return rc;
 }
 
 libxl_device_nic *libxl_device_nic_list(libxl_ctx *ctx, uint32_t domid, int *num)
